{"version":3,"sources":["redux/reducers/index.js","redux/actions/types.js","redux/actions/index.js","components/Header/Header.js","components/Header/index.js","components/FollowButton/FollowButton.js","components/FollowButton/index.js","components/List/index.js","components/List/List.js","App.js","serviceWorker.js","index.js"],"names":["initialUserState","currentUser","currentUsersList","db","users","rootReducer","combineReducers","user","state","action","type","payload","usersList","setUser","setUsersList","Header","props","handleSighOut","localStorage","removeItem","handleSignIn","firstUser","setItem","JSON","stringify","prevProps","this","setState","name","onClick","Component","connect","FollowButton","followed","buttonText","buttonClass","onMouseOverHandler","e","preventDefault","onMouseLeaveHandler","setUsers","allUsersList","handleClick","followers","push","index","indexOf","splice","map","follower","onMouseOver","onMouseLeave","className","List","groups","getList","Object","values","i","key","length","getGroup","group","id","group_id","App","parse","getItem","Boolean","window","location","hostname","match","store","createStore","composeWithDevTools","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2db3f434.chunk.js","sourcesContent":["import {combineReducers} from \"redux\"\nimport * as actionTypes from \"../actions/types\";\nimport db from \"../../db\"\n\nconst initialUserState = {\n    currentUser: null,\n    currentUsersList: db.users\n};\n\nconst user_reducer =(state=initialUserState, action)=>{\n    switch (action.type) {\n        case actionTypes.SET_USER:\n            return {\n                currentUser: action.payload.currentUser,\n            };\n        default:\n            return state;\n    }\n};\n\nconst users_list_reducer =(state=initialUserState, action)=>{\n    switch (action.type) {\n        case actionTypes.SET_USERS_LIST:\n            return {\n                currentUsersList: action.payload.currentUsersList,\n            };\n        default:\n            return state;\n    }\n};\n\nconst rootReducer = combineReducers({\n    user: user_reducer,\n    usersList: users_list_reducer\n});\n\nexport default rootReducer;","export const SET_USER = \"SET_USER\";\nexport const SET_USERS_LIST = \"SET_USERS_LIST\";\n","import * as actionTypes from \"./types\";\n\nexport const setUser = user =>{\n    return {\n        type: actionTypes.SET_USER,\n        payload: {\n            currentUser: user\n        },\n    }\n};\n\nexport const setUsersList = user =>{\n    return {\n        type: actionTypes.SET_USERS_LIST,\n        payload: {\n            currentUsersList: user\n        },\n    }\n};","import React, {Component} from 'react';\nimport {connect} from \"react-redux\"\nimport {setUser} from \"../../redux/actions\"\n\nclass Header extends Component {\n    state = {\n        currentUser: this.props.currentUser,\n    };\n\n    componentDidUpdate(prevProps){\n        if (this.props.currentUser !== prevProps.currentUser) {\n            this.setState({ currentUser: this.props.currentUser });\n        }\n    }\n\n    handleSighOut = () => {\n        localStorage.removeItem(\"currentUser\");\n        this.props.setUser(null)\n    };\n\n    handleSignIn = () => {\n        const firstUser = {\n            \"id\": 1,\n            \"name\": \"Dan\",\n            \"group_id\": 1,\n            \"followers\":[]\n        };\n        localStorage.setItem(\"currentUser\", JSON.stringify(firstUser));\n        this.props.setUser(firstUser)\n    };\n\n    render() {\n        return (\n            <div>\n                {this.props.currentUser ?\n                    <div>\n                        welcome {this.props.currentUser.name}\n                        <button onClick={this.handleSighOut}>Log out</button>\n                    </div>\n                    :\n                    <div>\n                        {<div>Must be signed in</div>}\n                        <button onClick={this.handleSignIn}>Log in as user1</button>\n                    </div>\n                }\n            </div>\n        );\n    }\n}\n\nexport default connect(null, {setUser})(Header);","import Header from \"./Header\"\n\nexport default Header","import React, {Component} from 'react';\nimport \"./FollowButton.css\"\nimport connect from \"react-redux/es/connect/connect\";\nimport {setUsersList} from \"../../redux/actions\"\n\nclass FollowButton extends Component {\n    state = {\n      followed: false,\n      user: this.props.user,\n      currentUser: this.props.currentUser,\n      buttonText: \"Follow\",\n      buttonClass: \"follow\"\n    };\n\n    componentDidMount(){\n        this.state.user.followers.map(follower=>{\n            if (follower.name===this.props.currentUser.name){\n                this.setState({followed:true, buttonText: \"Following\", buttonClass: \"following\"})\n            }\n        })\n    }\n\n    onMouseOverHandler = e => {\n        e.preventDefault();\n        if (this.state.followed === true) {\n            this.setState({buttonText:\"Unfollow\", buttonClass:\"unfollow\"});\n        }\n    };\n\n    onMouseLeaveHandler = e => {\n        e.preventDefault();\n        if (this.state.followed === false) {\n            this.setState({buttonText:\"Follow\",buttonClass:\"follow\"});\n        } else if (this.state.followed === true) {\n            this.setState({buttonText:\"Following\", buttonClass:\"following\"});\n        }\n    };\n\n    setUsers = () => {\n        const allUsersList = this.props.currentUsersList;\n        this.props.setUsersList(allUsersList);\n        localStorage.setItem(\"usersList\", JSON.stringify(allUsersList));\n    };\n\n    handleClick = e => {\n      const {followed, user,currentUser} = this.state;\n      e.preventDefault();\n      if (followed === false) {\n          user.followers.push(currentUser);\n          this.setUsers();\n          this.setState({followed: true, buttonText: \"Unfollow\", buttonClass:\"unfollow\"});\n      } else {\n          let index = user.followers.indexOf(currentUser);\n          user.followers.splice(index, 1);\n          this.setUsers();\n          this.setState({followed: false, buttonText: \"Follow\", buttonClass:\"follow\"});\n      }\n    };\n\n    render() {\n        return (\n                <button\n                    onMouseOver={this.onMouseOverHandler}\n                    onMouseLeave={this.onMouseLeaveHandler}\n                    onClick={this.handleClick}\n                    className={this.state.buttonClass}\n                >\n                    {this.state.buttonText}\n                </button>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    currentUsersList: state.usersList.currentUsersList,\n});\n\nexport default connect(mapStateToProps, {setUsersList})(FollowButton);","import FollowButton from \"./FollowButton\"\n\nexport default FollowButton","import List from \"./List\"\n\nexport default List","import React, {Component} from 'react';\nimport FollowButton from \"../FollowButton\"\nimport \"./List.css\"\n\nclass List extends Component {\n    state = {\n        currentUser: this.props.currentUser,\n        users: this.props.users,\n        groups: this.props.groups\n    };\n\n    // shouldComponentUpdate(nextProps){\n    //     const currentUser = this.props.currentUser !== nextProps.currentUser;\n    //     console.log(currentUser)\n    //     // this.setState({users:this.props.users, currentUser: this.props.currentUser})\n    //     return currentUser\n    // }\n    //\n    // componentDidUpdate(prevProps){\n    //     if (this.props.currentUser !== prevProps.currentUser) {\n    //         console.log(prevProps, this.props);\n    //         this.setState({currentUser: this.props.currentUser})\n    //     }\n    // }\n\n    getList = users => {\n        if(!users){\n            return null;\n        }\n        return Object.values(users).map((user,i)=>{\n            if (user.name !== this.state.currentUser.name){\n                return (<div key={i}>\n                    {user.name}\n                    <span className=\"info\"> {(user.followers || []).length} </span>\n                    <span className=\"info\">  {this.getGroup(user, this.state.groups)} </span>\n                    <FollowButton\n                        users={this.state.users}\n                        user={user}\n                        currentUser={this.state.currentUser}/>\n                </div>)\n            }\n        })\n    };\n\n    getGroup = (user, groups) => {\n        return Object.values(groups).map(group=>{\n            if (group.id === user.group_id){\n                return group.name\n            }\n        })\n    };\n\n    render() {\n        return (\n            <div>\n                Choose users to follow:\n                {this.getList(this.state.users)}\n            </div>\n        );\n    }\n}\n\nexport default List;","import React, {Component} from 'react';\nimport Header from \"./components/Header\"\nimport List from \"./components/List\"\nimport './App.css';\nimport {connect} from \"react-redux\";\nimport {setUser, setUsersList} from \"./redux/actions\"\nimport db from \"./db\";\n\nclass App extends Component {\n    componentDidMount(){\n        this.props.setUser(JSON.parse(localStorage.getItem(\"currentUser\")));\n        if (localStorage.getItem(\"usersList\")) {\n            this.props.setUsersList(JSON.parse(localStorage.getItem(\"usersList\")))\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <Header currentUser={this.props.currentUser}/>\n                {this.props.currentUser ?\n                    <List users={this.props.usersList.currentUsersList}\n                          groups={db.groups}\n                          currentUser={this.props.currentUser}/>\n                    : null}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    currentUser: state.user.currentUser,\n    usersList: state.usersList\n});\n\nexport default connect(mapStateToProps, {setUser, setUsersList})(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { createStore } from 'redux'\nimport { Provider } from 'react-redux'\nimport rootReducer from './redux/reducers'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { composeWithDevTools } from \"redux-devtools-extension\";\n\nconst store = createStore(rootReducer, composeWithDevTools());\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}