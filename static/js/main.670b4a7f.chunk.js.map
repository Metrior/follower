{"version":3,"sources":["components/FollowButton/FollowButton.module.css","components/User/User.module.css","App.module.css","redux/reducers/index.js","redux/actions/types.js","redux/actions/index.js","components/Header/Header.js","components/Header/index.js","components/FollowButton/FollowButton.js","components/FollowButton/index.js","components/User/index.js","components/User/User.js","components/List/index.js","components/List/List.js","components/Follower/Follower.js","components/Follower/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","initialUserState","currentUser","currentUsersList","db","users","rootReducer","combineReducers","user","state","action","type","payload","usersList","setUser","setUsersList","Header","props","handleSighOut","localStorage","removeItem","handleSignIn","firstUser","id","name","group_id","followers","setItem","JSON","stringify","this","onClick","Component","connect","FollowButton","followed","buttonText","onMouseOverHandler","setState","onMouseLeaveHandler","setUsers","allUsersList","handleClick","e","preventDefault","push","index","indexOf","splice","map","follower","onMouseOver","onMouseLeave","className","styles","following","follow","User","getGroup","groups","Object","values","group","i","key","info","length","List","getList","Follower","parse","getItem","App","app","Boolean","window","location","hostname","match","store","createStore","composeWithDevTools","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.670b4a7f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"follow\":\"FollowButton_follow__zp-2V\",\"following\":\"FollowButton_following__3plRe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"info\":\"User_info__fTEy8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__1kX79\"};","import { combineReducers } from \"redux\";\nimport * as actionTypes from \"../actions/types\";\nimport db from \"../../db\";\n\nconst initialUserState = {\n  currentUser: null,\n  currentUsersList: db.users\n};\n\nconst user_reducer = (state = initialUserState, action) => {\n  switch (action.type) {\n    case actionTypes.SET_USER:\n      return {\n        currentUser: action.payload.currentUser\n      };\n    default:\n      return state;\n  }\n};\n\nconst users_list_reducer = (state = initialUserState, action) => {\n  switch (action.type) {\n    case actionTypes.SET_USERS_LIST:\n      return {\n        currentUsersList: action.payload.currentUsersList\n      };\n    default:\n      return state;\n  }\n};\n\nconst rootReducer = combineReducers({\n  user: user_reducer,\n  usersList: users_list_reducer\n});\n\nexport default rootReducer;\n","export const SET_USER = \"SET_USER\";\nexport const SET_USERS_LIST = \"SET_USERS_LIST\";\n","import * as actionTypes from \"./types\";\n\nexport const setUser = user => {\n  return {\n    type: actionTypes.SET_USER,\n    payload: {\n      currentUser: user\n    }\n  };\n};\n\nexport const setUsersList = user => {\n  return {\n    type: actionTypes.SET_USERS_LIST,\n    payload: {\n      currentUsersList: user\n    }\n  };\n};\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { setUser } from \"../../redux/actions\";\n\nclass Header extends Component {\n  state = {\n    currentUser: this.props.currentUser\n  };\n\n  handleSighOut = () => {\n    localStorage.removeItem(\"currentUser\");\n    this.props.setUser(null);\n  };\n\n  handleSignIn = () => {\n    const firstUser = {\n      id: 1,\n      name: \"Dan\",\n      group_id: 1,\n      followers: []\n    };\n    localStorage.setItem(\"currentUser\", JSON.stringify(firstUser));\n    this.props.setUser(firstUser);\n  };\n\n  render() {\n    return (\n      <div>\n        {this.props.currentUser ? (\n          <div>\n            welcome {this.props.currentUser.name}\n            <button onClick={this.handleSighOut}>Log out</button>\n          </div>\n        ) : (\n          <div>\n            {<div>Must be signed in</div>}\n            <button onClick={this.handleSignIn}>Log in as user1</button>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default connect(\n  null,\n  { setUser }\n)(Header);\n","import Header from \"./Header\";\n\nexport default Header;\n","import React, { Component } from \"react\";\nimport styles from \"./FollowButton.module.css\";\nimport connect from \"react-redux/es/connect/connect\";\nimport { setUsersList } from \"../../redux/actions\";\n\nclass FollowButton extends Component {\n  state = {\n    followed: false,\n    user: this.props.user,\n    currentUser: this.props.currentUser,\n    buttonText: \"Follow\"\n  };\n\n  componentDidMount() {\n    this.state.user.followers.map(follower => {\n      if (follower.name === this.props.currentUser.name) {\n        this.setState({ followed: true, buttonText: \"Following\" });\n      }\n    });\n  }\n\n  onMouseOverHandler = () => {\n    if (this.state.followed) {\n      this.setState({ buttonText: \"Unfollow\" });\n    }\n  };\n\n  onMouseLeaveHandler = () => {\n    if (this.state.followed === false) {\n      this.setState({ buttonText: \"Follow\" });\n    } else if (this.state.followed === true) {\n      this.setState({ buttonText: \"Following\" });\n    }\n  };\n\n  setUsers = () => {\n    const allUsersList = this.props.currentUsersList;\n    this.props.setUsersList(allUsersList);\n    localStorage.setItem(\"usersList\", JSON.stringify(allUsersList));\n  };\n\n  handleClick = e => {\n    const { followed, user, currentUser } = this.state;\n    e.preventDefault();\n    if (followed === false) {\n      user.followers.push(currentUser);\n      this.setUsers();\n      this.setState({ followed: true, buttonText: \"Unfollow\" });\n    } else {\n      let index = user.followers.indexOf(currentUser);\n      user.followers.splice(index, 1);\n      this.setUsers();\n      this.setState({ followed: false, buttonText: \"Follow\" });\n    }\n  };\n\n  render() {\n    return (\n      <button\n        onMouseOver={this.onMouseOverHandler}\n        onMouseLeave={this.onMouseLeaveHandler}\n        onClick={this.handleClick}\n        className={this.state.followed ? styles.following : styles.follow}\n      >\n        {this.state.buttonText}\n      </button>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  currentUsersList: state.usersList.currentUsersList\n});\n\nexport default connect(\n  mapStateToProps,\n  { setUsersList }\n)(FollowButton);\n","import FollowButton from \"./FollowButton\";\n\nexport default FollowButton;\n","import User from \"./User\";\n\nexport default User;\n","import React, { Component } from \"react\";\nimport FollowButton from \"../FollowButton\";\nimport styles from \"./User.module.css\";\n\nclass User extends Component {\n  getGroup = (user, groups) => {\n    return Object.values(groups).map(group => {\n      if (group.id === user.group_id) {\n        return group.name;\n      }\n    });\n  };\n\n  render() {\n    return Object.values(this.props.users).map((user, i) => {\n      if (user.name !== this.props.currentUser.name) {\n        return (\n          <div key={i}>\n            {user.name}\n            <span className={styles.info}>\n              {\" \"}\n              {(user.followers || []).length}{\" \"}\n            </span>\n            <span className={styles.info}>\n              {\" \"}\n              {this.getGroup(user, this.props.groups)}{\" \"}\n            </span>\n            <FollowButton\n              users={this.props.users}\n              user={user}\n              currentUser={this.props.currentUser}\n            />\n          </div>\n        );\n      }\n    });\n  }\n}\n\nexport default User;\n","import List from \"./List\";\n\nexport default List;\n","import React, { Component } from \"react\";\nimport User from \"../User\";\n\nclass List extends Component {\n  state = {\n    currentUser: this.props.currentUser,\n    users: this.props.users,\n    groups: this.props.groups\n  };\n\n  getList = users => {\n    if (!users) {\n      return null;\n    }\n    return (\n      <User\n        users={users}\n        currentUser={this.state.currentUser}\n        groups={this.state.groups}\n      />\n    );\n  };\n\n  render() {\n    return (\n      <div>\n        Choose users to follow:\n        {this.getList(this.state.users)}\n      </div>\n    );\n  }\n}\n\nexport default List;\n","import React, { Component } from \"react\";\nimport Header from \"../Header\";\nimport List from \"../List\";\nimport db from \"../../db\";\nimport {connect} from \"react-redux\";\nimport { setUser, setUsersList } from \"../../redux/actions\";\n\nclass Follower extends Component {\n  componentDidMount() {\n    this.props.setUser(JSON.parse(localStorage.getItem(\"currentUser\")));\n    if (localStorage.getItem(\"usersList\")) {\n      this.props.setUsersList(JSON.parse(localStorage.getItem(\"usersList\")));\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <Header currentUser={this.props.currentUser} />\n        {this.props.currentUser ? (\n          <List\n            users={this.props.usersList.currentUsersList}\n            groups={db.groups}\n            currentUser={this.props.currentUser}\n          />\n        ) : null}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  currentUser: state.user.currentUser,\n  usersList: state.usersList\n});\n\nexport default connect(\n  mapStateToProps,\n  { setUser, setUsersList }\n)(Follower);\n","import Follower from \"./Follower\";\n\nexport default Follower;\n","import React, { Component } from \"react\";\nimport styles from \"./App.module.css\";\nimport Follower from \"./components/Follower\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className={styles.app}>\n        <Follower />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport rootReducer from \"./redux/reducers\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\n\nconst store = createStore(rootReducer, composeWithDevTools());\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}