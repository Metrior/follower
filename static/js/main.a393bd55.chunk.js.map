{"version":3,"sources":["components/Header/index.js","components/Header/Header.js","components/FollowButton/index.js","components/FollowButton/FollowButton.js","components/List/index.js","components/List/List.js","App.js","serviceWorker.js","index.js"],"names":["Header","state","currentUser","props","handleSighOut","localStorage","removeItem","setState","handleSignIn","setItem","JSON","stringify","getItem","prevProps","this","parse","name","onClick","Component","FollowButton","followed","innerButtonText","user","onMouseOverHandler","e","preventDefault","target","className","onMouseLeaveHandler","handleClick","followers","push","index","indexOf","splice","onMouseEnter","onMouseLeave","List","users","groups","getList","Object","values","map","length","getGroup","group","id","group_id","nextProps","console","log","App","db","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a393bd55.chunk.js","sourcesContent":["import Header from \"./Header\"\n\nexport default Header","import React, {Component} from 'react';\n\nclass Header extends Component {\n    state = {\n        currentUser: this.props.currentUser,\n    };\n\n    componentDidUpdate(prevProps){\n        if (this.props.currentUser !== prevProps.currentUser) {\n            this.setState({ currentUser: this.props.currentUser });\n        }\n    }\n\n    handleSighOut = () => {\n        localStorage.removeItem(\"currentUser\");\n        this.setState({currentUser: null})\n    };\n\n    handleSignIn = () => {\n        localStorage.setItem(\"currentUser\", JSON.stringify({\n            \"id\": 1,\n            \"name\": \"Dan\",\n            \"group_id\": 1,\n            \"followers\":[]\n        }));\n        this.setState({currentUser: localStorage.getItem(\"currentUser\")})\n    };\n\n    render() {\n        return (\n            <div>\n                {this.state.currentUser ?\n                    <div>\n                        welcome {JSON.parse(this.state.currentUser).name}\n                        <button onClick={this.handleSighOut}>Log out</button>\n                    </div>\n                    :\n                    <div>\n                        {<div>Must be signed in</div>}\n                        <button onClick={this.handleSignIn}>Log in as user1</button>\n                    </div>\n                }\n            </div>\n        );\n    }\n}\n\nexport default Header;","import FollowButton from \"./FollowButton\"\n\nexport default FollowButton","import React, {Component} from 'react';\nimport \"./FollowButton.css\"\n\nclass FollowButton extends Component {\n    state = {\n      followed: false,\n      innerButtonText: \"Follow\",\n      user: this.props.user,\n      currentUser: this.props.currentUser,\n    };\n\n    onMouseOverHandler = e => {\n        e.preventDefault();\n        if (this.state.followed === true) {\n            this.setState({innerButtonText: \"Unfollow\"});\n            e.target.className = \"unfollow\"\n        }\n    };\n\n    onMouseLeaveHandler = e => {\n        e.preventDefault();\n        if (this.state.followed === false) {\n            this.setState({innerButtonText: \"Follow\"});\n            e.target.className = \"follow\"\n        } else if (this.state.followed === true) {\n            this.setState({innerButtonText: \"Following\"});\n            e.target.className = \"following\"\n        }\n    };\n\n    handleClick = e => {\n        const {followed, user,currentUser} = this.state;\n      e.preventDefault();\n      if (followed === false) {\n          user.followers.push(currentUser);\n          this.setState({followed: true, innerButtonText: \"Following\"});\n          e.target.className = \"following\"\n      } else {\n          let index = user.followers.indexOf(currentUser);\n          user.followers.splice(index, 1);\n          this.setState({followed: false, innerButtonText: \"Follow\"});\n          e.target.className = \"follow\"\n      }\n    };\n\n    render() {\n        const {innerButtonText} = this.state;\n        return (\n            <div>\n                <button\n                    onMouseEnter={this.onMouseOverHandler}\n                    onMouseLeave={this.onMouseLeaveHandler}\n                    onClick={this.handleClick}\n                    className=\"follow\"\n                >\n                    {innerButtonText}\n                </button>\n            </div>\n        );\n    }\n}\n\nexport default FollowButton;","import List from \"./List\"\n\nexport default List","import React, {Component} from 'react';\nimport \"./List.css\"\nimport FollowButton from \"../FollowButton\"\n\nclass List extends Component {\n    state = {\n        currentUser: this.props.currentUser,\n        users: this.props.users,\n        groups: this.props.groups\n    };\n\n    shouldComponentUpdate(nextProps){\n        const currentUser = this.props.currentUser !== nextProps.currentUser;\n        console.log(currentUser)\n        // this.setState({users:this.props.users, currentUser: this.props.currentUser})\n        return currentUser\n    }\n\n    componentDidUpdate(prevProps){\n        if (this.props.currentUser !== prevProps.currentUser) {\n            console.log(prevProps, this.props);\n            this.setState({currentUser: this.props.currentUser})\n        }\n    }\n\n    getList = users => {\n        return Object.values(users).map(user=>{\n            if (user.name !== this.state.currentUser.name){\n                return <div>\n                    {user.name}\n                    {user.followers.length}\n                    {this.getGroup(user, this.state.groups)}\n                    <FollowButton user={user} currentUser={this.state.currentUser}/>\n                </div>\n            }\n        })\n    };\n\n    getGroup = (user, groups) => {\n        return Object.values(groups).map(group=>{\n            if (group.id === user.group_id){\n                return group.name\n            }\n        })\n    };\n\n    render() {\n        return (\n            <div>\n                {this.getList(this.state.users)}\n                <button onClick={()=>{console.log(this.props.currentUser)}}>shit</button>\n            </div>\n        );\n    }\n}\n\nexport default List;","import React from 'react';\nimport Header from \"./components/Header\"\nimport List from \"./components/List\"\nimport './App.css';\nimport db from \"./db\";\n\nfunction App() {\n  return (\n      <div className=\"App\">\n          <Header currentUser={localStorage.getItem(\"currentUser\")}/>\n          {JSON.parse(localStorage.getItem(\"currentUser\")) ?\n              <List users={db.users}\n                    groups={db.groups}\n                    currentUser={JSON.parse(localStorage.getItem(\"currentUser\"))}/>\n              : null}\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}